// Code generated by go-bindata.
// sources:
// bashenv/bash.bash
// bashenv/cmd.bash
// bashenv/fn.bash
// bashenv/plugn.bash
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashenvBashBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x5f\x6b\xdb\x30\x14\xc5\x9f\x97\x4f\x71\x22\x02\xde\x60\x89\x61\xe4\x29\x23\x81\x84\x6d\x64\x2f\xf1\x58\xc6\x68\x09\xa1\x28\xf2\x75\x2c\x2a\x4b\x45\x57\x26\xcd\xb7\xaf\xe4\x36\xc5\x4d\xfb\x64\xa3\x7b\xce\xef\xdc\x3f\x03\x5d\x61\xb7\x83\x18\xad\x96\xdb\xf5\xdd\xff\x9f\x7f\xb7\xbf\x37\xbf\x0a\x81\xb1\x09\x10\x53\x81\xfd\xfe\x3b\x42\x4d\x76\xf0\x89\x54\xed\x20\x86\x43\xdc\xba\xd6\x83\xcf\x1c\xa8\xc1\x4a\x72\x0d\xcd\x70\x6d\x80\xab\x50\xca\x40\x33\xf4\x58\xc5\x46\xf4\x9c\x7f\x0c\x49\x26\xb4\x0f\x47\x2f\x4b\x42\x70\xcf\xfe\x29\x9c\xc7\xd1\x53\x34\xfb\x49\xd4\x5f\x5a\xfa\xdc\x5a\xd9\xd0\x17\x81\xf9\x1c\xe2\x87\xf4\x27\x6d\xfb\x0d\x75\xdc\x97\x0f\x44\x61\x51\x6c\x71\xf3\x15\x6d\x4c\x58\xbb\x86\x0e\x9e\x4e\x29\x42\x5b\x0e\xd2\x18\x98\x88\xe7\xd0\x25\xce\xc4\xc5\x96\x01\x18\xa1\x93\x5e\x74\x87\x28\xc8\xae\xe9\xff\x62\x22\x64\x59\x42\x87\xc4\xcc\x29\xa8\x9c\x6b\x32\x86\x21\x6d\x09\x55\x4b\x7b\x24\x9c\xd3\x66\x62\xbe\xcf\x18\x5d\xf5\x3a\x88\xdb\xd2\xc5\x0a\xc6\x0a\xa2\x7b\xce\x5b\xf6\xb9\x71\x4a\x9a\xfc\xa0\x6d\x9e\xb2\xb1\x58\xf4\xf9\x22\x7b\x8b\x50\x75\xf2\xf3\x47\xce\x77\x5d\x2f\x61\xd3\x0e\xc8\x37\xda\x4a\x03\x26\x66\xed\x6c\xba\x57\xda\x60\x2c\xaa\xf8\x22\xfd\x39\x8d\x14\xe4\x3d\x81\xaa\x8a\x54\x98\x88\x57\x50\xa5\xe3\xf9\x1e\xe3\xd0\xdf\x06\xf1\xf7\x29\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenvBashBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvBashBash,
		"bashenv/bash.bash",
	)
}

func bashenvBashBash() (*asset, error) {
	bytes, err := bashenvBashBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1485014092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvCmdBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x73\x9b\x3c\x10\x3d\xc3\xaf\xd8\x4f\x51\x32\xc9\x81\xe1\xc3\xa7\x0e\x1e\x77\x9c\x69\x7b\x6b\x7b\xc9\xd1\x38\x33\x2a\x88\xc0\x58\x16\x1e\x84\xdd\x74\x30\xff\xbd\xbb\x42\x60\x88\x7d\x6a\x2e\x46\xbb\xab\xdd\xf7\x9e\xde\xc6\xcf\x64\xaa\x44\x2d\x21\x78\x86\x2f\x3f\xbe\xbe\xf8\x7e\xba\xcf\x02\x55\x9a\xe6\xf1\x09\x5a\xdf\x1b\xd2\x99\x34\xe9\x8a\x7d\xc7\xb8\x01\x71\x12\xa5\x12\xbf\x94\x84\xb4\xda\xef\x85\xce\x0c\xbb\x14\x6a\xb3\x62\x3c\xc2\xc0\xd0\x27\xd8\xc9\x3f\x06\x18\xd7\x86\xc1\x19\x8c\xcc\x80\x99\x10\x4f\x71\x18\x32\xbf\xbb\xcc\xb3\x75\xf3\xa1\x63\xaf\xbc\xaa\x61\x07\xa5\xc6\x36\xed\x7f\x04\x73\xb3\xde\x76\x6c\x09\x59\xe5\x7b\x9e\x4c\x8b\x0a\x13\x3b\x02\x51\x69\x89\x43\xde\x6a\x79\x00\xf6\x4a\x43\xec\xcc\xaa\x6e\x66\x93\xb4\x9b\xf3\x2f\x6d\x83\x13\xc4\x1f\x7a\xca\xf7\x03\x9e\x6e\xe9\xf5\xcd\x66\x50\x31\xc8\x8f\x3a\x6d\xca\x4a\x83\xa0\x93\xd3\x6d\x22\x5b\xae\x2d\x55\x4c\xe3\x6f\xbb\x88\x03\x1e\x75\x98\x56\x55\x2a\x94\xd5\xc1\xa9\xa0\x09\x2e\x7f\x9c\x50\x79\x9a\xe3\xcd\x35\x9b\x2a\x10\x30\x78\xf8\x0c\x61\x26\x4f\xa1\x3e\x2a\x05\x0f\x0f\xbd\xaa\xda\xd1\xf2\x3d\xcb\x9b\x9e\x27\xe6\xad\x30\xe1\x1d\x7e\x05\x61\xc7\xb6\x2b\xdb\x6b\xce\x71\x54\xee\xc3\x0b\x39\xba\x7c\x81\x5d\xe5\x09\x11\x63\x90\x0a\x01\x71\xcd\x14\x49\x18\xa7\xdf\x04\xeb\xac\x41\xb4\x01\x1e\x41\xc2\x12\xbe\x4e\x50\x78\xdf\xeb\x9c\x73\xfa\x79\xd0\x3f\xbf\x83\x18\x59\x50\xd1\x88\x69\x00\x73\x11\x09\x93\x4b\x30\x45\x99\x37\x30\x84\xb1\x70\x16\x3f\x9f\xa1\xa9\x8f\x72\x48\x9b\x46\x34\x47\xb3\xfa\xdf\xf7\xca\x1c\x06\x55\x47\xb7\x5a\x19\x5f\x39\xc6\x13\x3e\xd3\x71\x09\x4d\x21\x35\x92\xe0\xed\x44\x3f\xac\x63\xdb\x0e\x6f\xaf\x49\x07\x65\x70\x0a\xb5\xdd\x6c\x30\x44\x39\xd8\x6e\xc7\x8b\xee\xbd\x7e\x56\x60\x8e\x69\x31\x38\x22\x06\x5b\x48\x79\x87\x6c\x41\x4f\xab\x86\x2e\x04\xeb\xba\x09\x7f\xcc\x75\x40\xba\xf6\x15\x4f\x74\x3f\x2f\x9d\x27\x46\x6b\x3c\x5f\xad\x6d\x6c\x0b\xd1\x55\x38\x73\xee\x2b\xd7\xc8\x59\xcb\x3b\xd4\xa5\x6e\x72\x60\x00\xf7\xc1\xe2\x93\x81\x7b\x93\xa0\xcd\x1c\xa9\xd9\xf8\x6b\x39\x7a\x38\xbd\xd7\x46\x40\xef\x65\x03\xbc\x67\xe8\x13\x54\xf7\xa2\x85\x54\x87\x5b\x7b\xf4\x52\x54\xbf\x0d\x50\x16\x61\x22\xe0\xbd\xb0\xbb\x44\xd0\x6f\x2d\x93\xa8\xdf\xc8\x0c\xf4\x0a\x83\x70\x14\x9a\x48\x07\xf8\x37\x30\x27\x92\xd6\x13\xf4\x81\x8b\x7e\x07\x4a\xa0\x02\x78\xa3\x2f\x9b\xd8\xab\xa5\x36\xe1\x3d\x31\x0b\xe9\x1f\x45\x1f\xd4\x18\x82\xf9\x19\xc2\x00\x9d\x3c\xb9\x6e\xf7\xfb\x86\x38\x0e\x89\x0e\x88\x97\x5b\xdf\x68\x34\x8f\x5b\x11\xbb\xfc\x24\xd2\x64\x33\x06\xb9\xac\x2a\xfe\xdf\x00\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenvCmdBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvCmdBash,
		"bashenv/cmd.bash",
	)
}

func bashenvCmdBash() (*asset, error) {
	bytes, err := bashenvCmdBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1485014092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvFnBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x41\x6e\xc2\x30\x10\x3c\xc7\xaf\x18\xad\x22\x01\xaa\xa2\x08\xae\x34\x3d\x56\xea\x1b\x28\x07\xcb\xac\x89\xd5\xd4\x89\x6c\x03\xaa\x28\x7f\xef\x1a\xd2\x92\x43\x55\x55\xb9\x64\x77\x66\x67\x76\xd6\xca\xfa\x4a\x87\x7d\x9c\x2f\x70\x56\xc5\x8e\x4d\xa7\x03\x63\xc7\xd1\x34\xf4\xe2\xe3\xc0\x26\x41\xc3\x1e\xbc\x49\xae\xf7\xb3\x08\x21\x1f\xde\xd9\xa7\x48\xaa\xe8\x7a\xa3\xbb\xdc\xe9\x9c\xe7\xa6\x9c\xa7\x8f\x81\x51\x2e\xf1\x89\x7d\xe0\x01\xdf\x6a\x63\x59\x1d\x41\x53\x03\x12\xa0\x65\xbd\x43\xb5\x5c\xa8\x82\x4d\xdb\xa3\x62\x50\x79\x1e\x05\xeb\x1a\x35\xbd\x7a\xba\x64\xa2\x3e\xbd\xa1\x7a\x6e\x30\xab\x9b\xfa\x3c\x04\xe7\x13\xe8\x91\xca\x25\x3d\xd1\x65\x26\x78\x0a\xc8\x5c\xc8\xa7\x2e\x2a\xa7\xca\x16\xff\x4e\x95\xa1\xe0\x86\x5c\x51\x1e\xc8\x44\xf9\xe1\xa3\xe4\xa3\x5f\x82\x45\x33\x59\x9e\xd6\xb8\x6e\x5f\xe6\xfe\xe8\xee\xbc\xed\xff\x70\x8f\x13\x7b\xba\x73\xac\x6f\x72\x26\xc4\xb6\x3f\xc5\xfe\x10\x0c\x4b\xbd\xa2\xf1\x3a\x54\x5a\x8f\x72\x3e\xbe\x18\xa4\x5a\xfc\x40\xb8\x01\xd7\xcd\x26\x80\x2a\x9c\xc5\x66\x23\xa3\x77\x49\xc2\x76\xbb\x46\x6a\xd9\xab\xa2\xb8\x25\x13\x5d\x39\xa1\x76\x1d\x2a\x8f\x87\x95\xf4\x6f\xc3\xd6\x49\x9c\xaf\x00\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenvFnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvFnBash,
		"bashenv/fn.bash",
	)
}

func bashenvFnBash() (*asset, error) {
	bytes, err := bashenvFnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1485014092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvPlugnBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x58\x5f\x6f\x13\x39\x10\x7f\x4e\x3e\xc5\x60\x72\x25\x41\xda\x84\xf6\x74\x2f\xf4\x52\x81\xa0\x82\x4a\x08\xaa\x16\xee\x1e\xa0\xaa\xb6\xbb\xde\xc4\xea\xae\xbd\xac\x9d\xa4\x7f\xbf\xfb\xcd\xd8\xde\x7f\xe9\x26\x2d\xc7\x4b\xd9\xcc\x8c\xc7\x3f\xcf\xfc\x66\xc6\xa6\xbf\xe4\x85\x16\x4a\x0e\x47\x70\xdb\xef\xc5\x3c\x4a\xc3\x82\x43\xcc\x75\x34\x65\xa7\x73\xb5\x02\xaf\x67\xfd\x1e\x8f\xe6\x0a\x58\x9e\x2e\x66\xf2\x35\x0c\x6e\x8f\x3f\x7d\xfb\xf0\xf9\xfc\x9f\xc3\x93\xd3\xa3\x2f\x9f\x5f\x07\x31\x5f\xde\xb3\xfe\x7d\xbf\x2f\xa4\x36\x61\x9a\x76\x39\x3c\x72\x2a\x08\x41\xf2\x15\x90\x27\x21\x21\x29\x54\x86\x92\x0f\xc2\xc0\xb7\x93\x4f\xac\x5e\xb3\x28\xd2\x29\x1b\xec\x32\x90\x61\xc6\xf1\x6b\x0f\x75\xa9\x8a\xc2\x14\x62\xb5\x92\xa9\x0a\x63\x5e\x40\x58\xcc\x34\x44\x4a\x1a\x2e\x0d\x7e\xac\xe2\x7e\x2f\x5f\xe8\x79\x0c\x6c\x40\x00\x8f\x3e\x9f\x1f\xbf\xfd\xfa\x71\x12\x2e\x43\x91\x86\x17\x29\x67\xb0\x73\x30\x41\xac\x13\xb9\x48\xd3\x7e\x4f\x24\xf0\xfd\x3b\xda\x0e\x2f\x42\xcd\x69\x1f\xfc\xc6\x7d\xd9\x88\xc1\x74\x0a\x2f\x4d\x58\x8c\x67\x37\x70\x76\xb6\x0f\x66\xce\x65\xbf\xd7\x5b\xcd\x45\x34\x87\x08\x6d\xe0\x00\x2a\x47\xb0\x77\xb0\xb3\x0b\x3b\x3b\x0d\x64\x53\x46\x46\x8c\x84\x84\x71\xca\x02\x4d\x87\xf3\x0e\x56\x33\x6e\x1e\x75\x40\x46\x4d\x07\x3f\x21\x08\xb2\xf0\x2a\x28\x78\x2c\x0a\x1e\x99\xe9\x2e\x04\x5f\x02\xd6\x47\xaf\xee\x1c\xc1\x0d\xc2\xaf\x3d\xb0\x26\x70\x9f\xbe\xe3\x94\xe3\x49\xc1\x27\x09\xb8\x40\x75\xe1\xce\xa3\x0a\x07\xcb\xa8\x4a\xbd\x14\x21\xb8\x18\x30\xd8\x3d\xd8\xd9\xb3\x7e\xae\x30\x53\xbb\xf8\x95\x08\xfc\x93\x5d\x22\x16\x08\x72\xa0\xfc\x10\xd6\x1f\x64\xd3\x46\x31\xb0\x49\x72\x81\x85\x3b\x72\x08\x57\x37\x10\xbc\x6b\xaf\x29\xd3\xb6\xb7\x96\xa2\xde\x73\xc8\xc2\x4b\x0e\x7a\x81\x9c\x58\x21\x2d\x24\x3a\xc0\x10\x20\x67\xb4\x90\xb3\x14\xc9\x85\x08\x84\x44\xd8\x6a\x51\x90\x77\x3c\x04\x2e\x2b\x49\x71\x8e\x6a\x3d\x1d\x0e\x86\x89\x90\x31\x8c\x81\x42\x18\xf3\xdc\xcc\x01\xc3\x27\x95\x41\xf0\x21\xfe\x78\x31\x7e\x01\x81\xb9\xce\xd1\xdd\x68\xd4\x5c\x9e\x88\x94\x6f\x5c\x6f\x17\x24\x76\x41\x49\xa5\xdb\xe7\xad\x9d\xbf\xbf\x39\xbb\x67\x10\xf0\x9f\x68\x7e\x76\x46\xa7\x6d\x5b\x39\xff\xb5\xd5\xab\x56\xd2\x5c\x50\xc6\x93\x97\xcd\x98\x54\x21\xeb\x3d\xe1\x48\xfc\x8a\x47\x90\x2d\x21\x48\xe0\xf6\x1e\xc6\xe3\x09\xfc\xd8\xa7\xb5\x58\x2a\x58\x53\xc7\xff\xbe\x67\x76\x1f\x95\xc7\x6b\x61\xef\x15\x19\x05\x96\x0d\xd0\x92\xf9\x74\xf3\x54\x73\xfc\x9c\x21\x03\xa2\x54\xc9\xb2\x5a\x60\x80\xcc\x20\xbd\x77\x53\xf3\x9a\x1a\xc2\x42\x6e\x69\x09\x27\x3c\x53\x4b\xde\xee\x05\x65\xad\x7a\xa9\x6e\xf4\x04\x27\xb1\x6d\xa1\x8f\x00\x21\x28\x92\xb5\x4a\xc7\x2a\xc6\xa5\xf1\x64\xe0\x4c\x37\x99\x55\x9b\xd4\x86\x04\x35\x8f\x43\xc3\xbb\x70\x7e\xb3\x9a\x12\x67\x88\x61\x57\xb9\xc1\xbe\x88\xc7\xba\x86\x1c\x45\x48\xbf\x48\x65\x99\x30\x13\x13\xce\x26\x17\x45\x28\xa3\x79\x37\x70\x6f\x67\x84\x9e\xfb\xae\x86\x8c\x78\x06\xc1\xc6\x9e\x55\x41\xf4\x04\x2a\x2b\xd9\x42\x19\x7a\xe5\x08\x28\xf1\x3e\xd2\x3c\xb6\x75\x55\x96\xea\xd6\x8e\x58\x7b\x6f\xe5\xbf\x6c\x27\x35\x58\x56\xf3\xf7\x19\x0c\x86\x44\x02\x7d\x9d\x5d\xa8\x54\x44\xd8\x92\x12\xf8\x78\xf8\xf6\xfd\xa8\x0b\x22\x86\x47\x62\xbd\x62\x84\x06\xc3\xbf\x91\xcc\x63\xb7\xe1\x79\xed\x7a\x54\xc3\x7d\xd5\x77\xf4\x9a\xf3\xe8\x52\x2d\x0c\xd6\xbe\x36\xd8\xa1\x5a\xa4\xb2\x16\xb9\xad\x84\x07\xe2\x6a\x61\xb0\xa6\xf4\x2d\x52\x3e\x38\x53\x55\x6d\xb4\x3c\xe1\x06\xdb\x73\x10\x60\x12\xf5\x9a\x83\xb6\xfb\x86\x93\x75\x3b\x77\xf8\xd6\x2e\x07\x9d\xc7\xee\xd7\x5d\x79\x2d\x97\x8e\x88\xb1\x25\x5a\x23\x7c\x0d\x97\x55\x31\x6e\xf7\xc0\xb6\x14\x66\x2a\xb4\xe9\xe2\xfa\x27\x94\x03\xb5\x7f\x37\x6d\xeb\x2a\xd4\x73\x24\x3d\x04\x1a\xc8\xc3\x2c\x55\x17\xe8\x1c\xa7\x86\x6d\x36\xb8\xf9\x06\x7e\xbd\xdc\xc7\xa9\x86\x40\x9b\xde\xa6\xcd\x91\x3b\x20\x07\x23\x56\x99\x20\x85\xcd\x42\x93\x09\x25\x8c\xc3\xb6\xfa\x6e\xf2\xcd\xab\xe0\xee\xce\xfd\x8e\x85\xb6\x82\x86\x6b\x7f\x9b\x21\xdf\x51\x68\xdc\xce\x13\xe7\x69\x6c\x54\x96\xd2\x78\xc2\x7f\x02\x9a\x83\xac\xac\x0b\x56\xde\x81\x1a\x8e\x5c\xa4\x7e\xc9\x0b\x2d\x29\x84\xed\x1a\xce\x53\x5e\xe0\xd4\xc2\xc6\x04\xf0\x47\xb0\xf7\x4a\xe3\xdf\xbf\xe8\xcf\x2e\x7d\xea\x1f\xb4\xa4\x2a\x4d\x36\x28\x31\xe0\xa7\x8b\x0f\x7d\x91\x4b\x6a\x32\xd8\x8a\xab\xec\x2c\xea\xec\x60\x8e\x4d\x21\x66\x33\x5e\x74\xa5\xf9\xab\x53\x69\x98\x2b\x75\x49\xf9\x2b\xe3\xf7\xb0\xed\x92\x85\xed\x5d\xfb\xa0\xe7\x22\x31\x9b\xa9\xe0\x92\xb2\x4e\x86\x32\x69\x25\x15\xf8\x12\x43\x48\xd1\x53\x32\x11\x33\x9c\x51\xb9\x2a\x30\x8e\x4d\x4a\x38\x1a\x63\x9c\x00\x7a\xb6\x19\x5d\x55\xe1\x98\x0c\x08\x4f\xd9\x8e\x5a\x42\xb4\x79\xb3\x25\x20\x3d\x1f\x8e\x60\x86\xb5\xb1\x0a\xaf\xa1\xb1\x08\x83\xe5\x60\x76\xc5\xea\xd0\x6a\xf0\xca\x51\x4d\x95\xce\x89\xd4\xb8\x0d\x75\x1c\x9f\xee\xaf\x12\x07\xb1\x7e\xbc\x15\x3f\x3a\xd3\x38\x5d\xae\xca\x63\x10\x76\x4f\xf6\x2e\xf0\xef\x9d\xea\xf7\xd1\xe3\x24\xfd\x75\x60\x3e\xc7\x58\x0b\x5d\xd8\x3e\x60\x89\x78\xd2\x38\xc3\x45\x11\x1a\xf7\xde\xe8\x1a\x9d\x8d\xa7\x00\x55\x5e\x1b\x8d\x73\x60\x2b\x90\xb5\x4a\xb0\x11\x56\x72\xc0\x1a\xb0\x1c\xf5\x3a\x53\xee\x48\xf9\x74\x70\x4f\x85\xe4\xd9\xce\x9a\x17\x0f\x8f\x46\x77\x07\xe9\xf4\x7f\x06\x09\xb0\xcc\x16\xf4\xf9\x67\xf9\x7c\xb3\xe3\xcf\x4a\x2b\x38\x9a\x6f\x05\xdd\x19\x3c\x21\x45\x27\xd0\x23\x94\x8b\x30\x15\x37\x48\x36\xec\x27\x59\x6e\xae\x4b\xe0\xd4\x23\x37\x72\x0c\x15\x46\x2d\x70\xf0\x6e\x06\xf2\x04\x7a\x6e\x30\xa8\xdf\x7e\xe5\x1b\xb6\x86\x19\x7b\x90\x34\x3e\x65\x13\xea\x7a\x0b\xb3\xc7\x3e\xd7\xf8\xc2\x88\x3a\x6b\xec\xd4\x6a\xec\xd5\x0e\x67\xb6\x06\x6a\x86\xd6\x7a\xed\x22\xfb\x3b\x7d\xb3\xec\x84\x49\xa3\x13\x3e\x6c\x99\xe3\xfa\xa6\xe6\x4e\xeb\x40\xc3\x23\x4b\xb6\x4e\x91\x2c\x14\xfe\x7f\x08\x88\x2d\x01\x57\x78\x29\xc9\x79\x82\x71\xdd\x77\xcf\x99\xaf\x27\x6f\xdf\x1d\x96\xdb\x5a\x9b\x2b\x7c\x96\x46\x59\x5c\xb2\xdd\x8f\xaf\x96\xcc\x5f\x56\x5b\xb2\xea\xb1\xd0\x96\xda\xcb\x4c\x4b\x44\x97\x97\x96\xc0\xb7\xf6\x96\xcc\xc5\xaf\x25\xf2\x7d\xb2\x25\xf3\x79\x2d\x43\xc5\x9a\xca\x40\x6a\x5f\x74\xd5\x25\x6b\xbd\x06\x1b\x9e\xea\x66\xd7\x25\x76\xbf\xba\x34\x7a\x6d\x01\x15\x98\x0f\x20\xee\xcf\x58\x39\xa2\xfe\x0b\x00\x00\xff\xff\xe3\x58\xea\x2b\xaf\x11\x00\x00")

func bashenvPlugnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvPlugnBash,
		"bashenv/plugn.bash",
	)
}

func bashenvPlugnBash() (*asset, error) {
	bytes, err := bashenvPlugnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/plugn.bash", size: 4527, mode: os.FileMode(420), modTime: time.Unix(1485046635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash": bashenvBashBash,
	"bashenv/cmd.bash": bashenvCmdBash,
	"bashenv/fn.bash": bashenvFnBash,
	"bashenv/plugn.bash": bashenvPlugnBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bashenv": &bintree{nil, map[string]*bintree{
		"bash.bash": &bintree{bashenvBashBash, map[string]*bintree{}},
		"cmd.bash": &bintree{bashenvCmdBash, map[string]*bintree{}},
		"fn.bash": &bintree{bashenvFnBash, map[string]*bintree{}},
		"plugn.bash": &bintree{bashenvPlugnBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

